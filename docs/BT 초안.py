# =======================================================================
# 가능한 행동 리스트 (Action List) - 참조용
# =======================================================================
# ### 방어 (Defense)
# * 방패 막기 2s (타이밍 맞춰 방패를 들어올려 적의 공격을 막음. 성공 시 데미지 없음)
# * 방패 밀치기 5s (적을 밀어내어 거리 확보 및 일시적 균형 잃게 함)
# ### 회피 (Evasion)
# * 회피 10s (지정 방향으로 짧게 이동하여 적의 공격을 피함)
# * 회피 접근 및 연계 공격 20s (적의 공격을 한 방향으로 짧게 움직여 피하면서 접근, 즉시 짧은 공격으로 연계)
# ### 반격 (Counter)
# * 받아치기 20s (빠르고 짧은 공격으로 반격하여 경직 유도 또는 약간의 피해)
# ### 공격 (Attack)
# * 공격 2s (일반적인 단타 공격)
# * 몰아치기 20s (2~3회의 빠른 연속 공격)
# * 파괴의 일격 10s (가장 강력한 일반 공격 또는 특정 스킬 사용)
# ### 이동 및 위치 선정 (Movement & Positioning)
# * 후퇴 및 거리 유지 (적의 공격 범위를 벗어나며 상황 관찰)
# * 위치 변경 (더 유리하거나 안전한 위치로 이동, 회복 아이템 탐색 - 해당 기능이 있다면)
# * 이동 (좌우 또는 후방으로 짧게 이동하며 최적의 공격 거리 유지)
# * 후퇴 및 견제 (안전 거리로 빠지면서 원거리 견제 스킬 사용 - 있다면)
# ### 자세 유지 (Stance/Idle)
# * 방어 자세 유지 (Idle) (적을 주시하며 방패를 들고 방어 자세 유지)
# * 공격 자세 유지 (Idle) (적을 주시하며 공격 기회를 살피는 자세 유지)

# =======================================================================
# 수비 집중형 에이전트 (Defensive Agent Logic)
# =======================================================================
def decide_defensive_action() -> str:
    current_action: str = "방어 자세 유지 (Idle)"

    if ("적의 강력한 공격 감지" and "회피 쿨타임 완료" and "자신의 체력 < 40%"):
        current_action = "회피"
    elif ("적의 공격 임박" and "방패 막기 쿨타임 완료" and "적과의 거리 '근접'"):
        current_action = "방패 막기"
    elif ("적이 일반 공격 시도 중" and "방패 막기 쿨타임 완료" and \
         ("회피 쿨타임 미완료" or "회피가 부적절한 상황")):
        current_action = "방패 막기"
    elif ("'방패 막기' 성공" and "적이 공격 후딜레이 상태" and "받아치기 쿨타임 완료"):
        current_action = "받아치기"
        if ("'받아치기' 성공" and "적이 경직 또는 매우 취약한 상태" and \
           "몰아치기 쿨타임 완료" and "주변 안전 확보"):
            current_action = "몰아치기"
    elif (("적과의 거리 '근접'" or "자신이 불리한 위치") and \
         "방패 밀치기 쿨타임 완료"):
        current_action = "방패 밀치기"
    elif ("상황이 불리함" or "자신의 체력 < 적의 체력"):
        current_action = "후퇴 및 거리 유지"
    elif ("적이 매우 큰 빈틈을 보임" and "파괴의 일격 쿨타임 완료" and "주변 안전 확보"):
        current_action = "파괴의 일격"
    elif (("적이 원거리에서 방심 중" or ("적의 체력 < 30%" and "추격 필요")) and \
         "회피 접근 및 연계 공격 쿨타임 완료"):
        current_action = "회피 접근 및 연계 공격"
    elif ("적이 명백한 빈틈을 보임" and "다른 공격 스킬 쿨타임 중" and \
         "주변 안전 확보" and "공격 쿨타임 완료"):
        current_action = "공격"
    elif (("자신의 체력 < 50%" and "안전하게 재정비 가능") or "지형적으로 유리한 위치 발견"):
        current_action = "위치 변경"
    elif ("수비형 에이전트가 공격 자세를 취할 특수 조건"):
        current_action = "공격 자세 유지 (Idle)"

    print(f"수비형 에이전트 결정 행동: {current_action}")
    return current_action

# =======================================================================
# 공격 집중형 에이전트 (Offensive Agent Logic)
# =======================================================================
def decide_offensive_action() -> str:
    current_action: str = "공격 자세 유지 (Idle)"

    if ("적이 매우 큰 빈틈을 보임" and "파괴의 일격 쿨타임 완료"):
        current_action = "파괴의 일격"
    elif (("적과의 거리 '원거리'" or "추격 필요") and \
         "회피 접근 및 연계 공격 쿨타임 완료"):
        current_action = "회피 접근 및 연계 공격"
    elif ("적이 경직 또는 매우 취약한 상태" and "몰아치기 쿨타임 완료" and \
         "적과의 거리 '근접'"):
        current_action = "몰아치기"
    elif ("적과의 거리 '유효 사거리 내'" and "공격 쿨타임 완료" and \
         "적이 방어 자세를 취하지 않음"):
        current_action = "공격"
    elif ("'방패 막기' 성공 (긴급 방어)" and "적이 공격 후딜레이 상태" and "받아치기 쿨타임 완료"):
        current_action = "받아치기"
    elif (("자신이 적에게 너무 근접" or "포위될 위험") and \
         "방패 밀치기 쿨타임 완료"):
        current_action = "방패 밀치기"
    elif ("피할 수 없는 매우 위협적인 공격 감지" and "회피 쿨타임 완료"):
        current_action = "회피"
    elif ("거리 재조정 필요" or \
         ("적과의 거리 != '근접'" and "적이 일반 공격 시도 중")):
        current_action = "이동"
    elif ("체력 회복 또는 주요 스킬 쿨타임 확보 필요"):
        if ("원거리 견제 스킬 사용 가능"):
            current_action = "후퇴 및 견제"
        else:
            current_action = "후퇴 및 거리 유지"
    elif (("회피 불가능 또는 쿨타임 중") and "적의 공격 임박" and \
         "방패 막기 쿨타임 완료"):
        current_action = "방패 막기"
    elif ("자신의 체력 < 30%" and "안전하고 유리하게 위치 변경 가능 (공격형)"):
        current_action = "위치 변경"
    elif ("공격형 에이전트가 방어 자세를 취할 특수 조건"):
        current_action = "방어 자세 유지 (Idle)"

    print(f"공격형 에이전트 결정 행동: {current_action}")
    return current_action

# # 예시 실행
# if __name__ == '__main__':
#     print("--- 수비형 에이전트 시뮬레이션 ---")
#     defensive_action = decide_defensive_action()
#
#     print("\n--- 공격형 에이전트 시뮬레이션 ---")
#     offensive_action = decide_offensive_action()
